svg.hylimo {
    background: var(--diagram-background);

    text {
        white-space: pre;
        user-select: none;
    }

    .background-pattern {
        fill: var(--diagram-grid);
    }

    .selected-outline {
        fill: none;
        stroke: var(--diagram-layout-color-selected);
        pointer-events: none;
    }

    .selected-outline,
    .selected-outline-corner,
    .canvas-rotate-icon,
    .canvas-point-inner,
    .bezier-handle-line,
    .canvas-dependency-line {
        stroke-width: 1.5px;
    }

    .selected-outline,
    .selected-outline-corner,
    .canvas-rotate-icon,
    .resize,
    .canvas-point-inner,
    .bezier-handle-line,
    .canvas-dependency-line,
    .select-box,
    .select-canvas-connection,
    .create-connection-outline,
    .snap-line,
    .snap-line-point {
        vector-effect: non-scaling-stroke;
    }

    .selected-outline-corner,
    .canvas-rotate-icon,
    .canvas-point-inner {
        fill: var(--diagram-background);
        stroke: var(--diagram-layout-color-selected);
    }

    .canvas-rotate-icon {
        rx: 100%;
        cursor: grab;
    }

    .canvas-point {
        fill: transparent;
    }

    .canvas-point.selected,
    .canvas-point:hover {
        fill: rgb(from var(--diagram-layout-color-selected) r g b / 0.5);
    }

    .canvas-point-inner {
        pointer-events: none;
    }

    .canvas-dependency-line {
        stroke: var(--diagram-layout-color);
        fill: none;
        pointer-events: none;
    }

    .arrow-marker {
        fill: var(--diagram-layout-color);
    }

    .bezier-handle-line {
        stroke: var(--diagram-layout-color);
        fill: none;
        pointer-events: none;
    }

    .select-canvas-connection {
        fill: none;
        stroke: transparent;
        stroke-width: 12px;
    }

    .canvas-rotate-icon > path {
        fill: var(--diagram-layout-color);
    }

    .canvas-rotate-icon > rect {
        fill: transparent;
        cursor: pointer;
    }

    .resize {
        stroke: transparent;
        stroke-width: 12px;
    }

    .resize-corner {
        stroke-linecap: square;
    }

    .snap-line,
    .snap-line-point,
    .snap-line-gap {
        stroke: var(--diagram-layout-color-snap);
        stroke-width: 1px;
        pointer-events: none;
    }

    .snap-line {
        shape-rendering: crispEdges;
    }

    .snap-arrow-marker {
        fill: var(--diagram-layout-color-snap);
    }

    .cursor-resize-0,
    .cursor-resize-4 {
        cursor: nwse-resize;
    }

    .cursor-resize-1,
    .cursor-resize-5 {
        cursor: ns-resize;
    }

    .cursor-resize-2,
    .cursor-resize-6 {
        cursor: nesw-resize;
    }

    .cursor-resize-3,
    .cursor-resize-7 {
        cursor: ew-resize;
    }

    .create-connection-outline {
        stroke: rgb(from var(--diagram-layout-color-selected) r g b / 0.15);
        stroke-linejoin: round;
        stroke-linecap: round;
        fill: none;
        cursor: default;
        pointer-events: none;
        stroke-width: 15px;
    }

    .split-canvas-connetion-preview {
        pointer-events: none;
    }

    .canvas-connection:has(.split-canvas-connetion-preview) * {
        cursor: move;
    }

    .selectable {
        cursor: pointer;
    }

    .selected-outline,
    .canvas-point.selected,
    .canvas-element.selected {
        cursor: move;
    }

    .select-box {
        fill: rgb(from var(--diagram-layout-color-selected) r g b / 0.1);
        stroke: var(--diagram-layout-color-selected);
        stroke-width: 1px;
    }

    &.cursor-resize-0,
    &.cursor-resize-4 {
        &,
        & * {
            cursor: nwse-resize !important;
        }
    }

    &.cursor-resize-1,
    &.cursor-resize-5 {
        &,
        & * {
            cursor: ns-resize !important;
        }
    }

    &.cursor-resize-2,
    &.cursor-resize-6 {
        &,
        & * {
            cursor: nesw-resize !important;
        }
    }

    &.cursor-resize-3,
    &.cursor-resize-7 {
        &,
        & * {
            cursor: ew-resize !important;
        }
    }

    &.cursor-move {
        &,
        & * {
            cursor: move !important;
        }
    }

    &.cursor-grab {
        &,
        & * {
            cursor: grab !important;
        }
    }

    &.cursor-grabbing {
        &,
        & * {
            cursor: grabbing !important;
        }
    }

    &.cursor-crosshair {
        &,
        & * {
            cursor: crosshair !important;
        }
    }
}
